name: cx

on: push

env:
  AWS_REGION: us-east-1
  API_STAGE_NAME: "v0"
  ACCESS_LOG_RETENTION_DAYS: 7
  FUNC_MEMORY_SIZE: 128
  FUNC_TIMEOUT: 5
  FUNC_LOG_RETENTION_DAYS: 7

defaults:
  run:
    shell: "/bin/bash {0}"

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      CFN_TEMPLATES: "./api-gateway/stack.yml\n.github/cd_setup.yml\n"
    steps:
      - name: clone the repo
        uses: actions/checkout@v2.3.4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.5.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: validate all cloudformation templates
        run: |
          printf "${{ env.CFN_TEMPLATES }}" | while read template; do
            aws cloudformation validate-template \
              --template-body="file://$template"
          done

  deploy:
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      _stack_name: ${{ steps.configure_environment.outputs._stack_name }}
    steps:
      - name: clone the repo
        uses: actions/checkout@v2.3.4

      - name: map branch 2 test/prod
        run: |
          if [[ ${{ github.ref }} == *main ]]; then
            echo "ENVIRONMENT=test" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=test" >> $GITHUB_ENV
          fi

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.5.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: configure the environment
        id: configure_environment
        run: |
          echo "STACK_NAME=sample-api-$ENVIRONMENT" >> $GITHUB_ENV
          echo "UPSERT_SALES_TAXES_TOTAL_PRICE_HANDLER_NAME=sample-api-$ENVIRONMENT-upsertsalestaxestotalpricehandler" >> $GITHUB_ENV
          echo "::set-output name=_stack_name::sample-api-$ENVIRONMENT"

      - name: deploy the api gateway stack
        run: |
          aws cloudformation deploy \
            --template-file=./api-gateway/stack.yml \
            --stack-name=${{ env.STACK_NAME }} \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
              ApiStageName=${{ env.API_STAGE_NAME }} \
              FunctionMemorySize=${{ env.FUNC_MEMORY_SIZE }} \
              FunctionTimeout=${{ env.FUNC_TIMEOUT}} \
              FunctionLogRetentionInDays=${{ env.FUNC_LOG_RETENTION_DAYS }} \
              AccessLogRetentionInDays=${{ env.ACCESS_LOG_RETENTION_DAYS }} \
              UpsertSalesTaxesTotalPriceHandlerName=${{ env.UPSERT_SALES_TAXES_TOTAL_PRICE_HANDLER_NAME }} \
            --capabilities=CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: deploy the lambda handler
        run: |
          cd ./api-gateway/lambdas/receipt/upsert && npm i && ls | grep package-lock
          tsc && ls
          [ -f "dist/index.js" ] && echo "compilation completed!!!" || exit 1
          npm ci --only=prod
          cd ../../../..
          npx @vercel/ncc@0.33.0 build \
            --external=aws-sdk \
            --out=./api-gateway/lambdas/receipt/bundles/upsert \
            ./api-gateway/lambdas/receipt/upsert/dist/index.js
          zip -j /tmp/bundle.zip ./api-gateway/lambdas/receipt/bundles/upsert/index.js
          [ -f "/tmp/bundle.zip" ] && echo "created lambda zip file archive!!!" || exit 1
          aws lambda update-function-code \
            --function-name=${{ env.UPSERT_SALES_TAXES_TOTAL_PRICE_HANDLER_NAME }} \
            --publish \
            --zip-file=fileb:///tmp/bundle.zip

  test:
    runs-on: ubuntu-latest
    needs:
      - validate
      - deploy
    steps:
      - uses: actions/checkout@v2.3.4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.5.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: fetch stack outputs
        run: |
          api_base_url="$( \
            aws cloudformation describe-stacks \
              --stack-name="${{ needs.deploy.outputs._stack_name }}" \
              --query="Stacks[0].Outputs[?OutputKey=='ApiBaseURL'].OutputValue" \
              --output=text \
          )"
          echo "_BASE_URL=$api_base_url" >> $GITHUB_ENV

      - name: api testing
        run: |
          printf "[DEBUG] api base url: %s\n" "$_BASE_URL"
          source <(curl -sSf https://raw.githubusercontent.com/chiefbiiko/bashert/v1.0.1/bashert.sh)
          source ./api-gateway/lambdas/test/test_suite.sh
          test_receipt_upsert_204
